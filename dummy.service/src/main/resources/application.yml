server:
  port: 9200
spring:
  profiles:
    active: "dev"
  application:
    name: dummy-service
  
  kafka:
    consumer:
      auto-offset-reset: earliest
      group-id: dummy
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    producer:
      group-id: dummy
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

dock-event:
  producer: dock-event
  consumer: dock-event

auto:
  create:
    topics:
      enable: true
      
eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
  instance:
    # Leave prefer ip address to allow the gateway inside the kubernetes cluster to find this service by it's pod ip
    preferIpAddress: true
    # The hostname of the service, to register the pod and turn it easier for the gateway to find it
    # For deploying eureka clients in Kubernetes you need to set the hostname as the same name of the service
    hostname: dummy-service
    
---
spring:
  profiles: dev  
  kafka:
    consumer:
      bootstrap-servers: localhost:9094
    producer:
      bootstrap-servers: localhost:9094

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

---
spring:
  profiles: prod 
  kafka:
    consumer:
      bootstrap-servers: kafka-0.broker.kafka:9092
    producer:
      bootstrap-servers: kafka-0.broker.kafka:9092
      
eureka:
  client:
    service-url:
      defaultZone: http://eureka:8761/eureka
      

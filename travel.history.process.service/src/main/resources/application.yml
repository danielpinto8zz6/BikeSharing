server:
  port: 8700
spring:
  profiles:
    active: "dev"
  application:
    name: travel-history-process-service

  kafka:
    consumer:
      auto-offset-reset: earliest
      group-id: travel-event
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

topic:
  travel-event:
    consumer: travel-event

auto:
  create:
    topics:
      enable: true

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
  instance:
    # Leave prefer ip address to allow the gateway inside the kubernetes cluster to find this service by it's pod ip
    preferIpAddress: true
    # The hostname of the service, to register the pod and turn it easier for the gateway to find it
    # For deploying eureka clients in Kubernetes you need to set the hostname as the same name of the service
    hostname: travel-history-process-service

---
spring:
  profiles: dev

  kafka:
    bootstrap-servers: localhost:9094

  data:
    mongodb:
      uri: mongodb://mongo:Pass2020!@localhost:27017/travel-history?authSource=admin&retryWrites=true

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

---
spring:
  profiles: prod
  
  kafka:
    bootstrap-servers: kafka-0.kafka.kafka:9092

  data:
    mongodb:
      uri: mongodb://mongo:Pass2020!@mongodb:27017/travel-history?authSource=admin&retryWrites=true

eureka:
  client:
    service-url:
      defaultZone: http://eureka-0.eureka:8761/eureka,http://eureka-1.eureka:8761/eureka,http://eureka-2.eureka:8761/eureka
